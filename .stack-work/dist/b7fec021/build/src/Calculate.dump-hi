
==================== FINAL INTERFACE ====================
2017-01-13 05:53:15.3183246 UTC

interface compiler-0.1.0.0-I0pxvr0RakAFj74FxK0lcc:Calculate 8001
  interface hash: ca76c31301eee05fadd2011d2a79c580
  ABI hash: 9fcc91a0a401a7a16aad8a0b63573ff8
  export-list hash: c7864d90125a6aaac4601e8a2855958d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 36f5ed5780f13d451f8563110c8a6d30
  sig of: Nothing
  used TH splices: False
  where
exports:
  Calculate.Number{Calculate.Double Calculate.Integer}
module dependencies: Parser
package dependencies: array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-4RIYnAHyOmg6Dh17ENWi43
                      base-4.9.0.0* binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-Ctl752zbguF6QanxurLOm2
                      integer-gmp-1.0.0.1
                      integer-logarithms-1@integer-logarithms-1-E6LvTbkhTkGIa6wPB3rtJw
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      scientific-0.3.4.10@scientific-0.3.4.10-2Y658Wts4fDGgAkWhKOJwC
                      text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs
                      transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-4RIYnAHyOmg6Dh17ENWi43:Data.Attoparsec.Text.Internal
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-Ctl752zbguF6QanxurLOm2:Data.Hashable.Generic
         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text
         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Fusion.Bundle
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-4RIYnAHyOmg6Dh17ENWi43:Data.Attoparsec.Internal.Types
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Functor.Identity base-4.9.0.0:Data.List.NonEmpty
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Semigroup
                         base-4.9.0.0:Data.Type.Equality base-4.9.0.0:Data.Version
                         base-4.9.0.0:Data.Void base-4.9.0.0:GHC.Exts
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text
                         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text.Lazy
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector
import  -/  base-4.9.0.0:GHC.Show 0b5845243cb2ec62b57dd6963d276ec6
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  Parser 28cc00f614fbcf1e1ebbd5969da82854
  exports: 8d4d089a11bd7c5d4a0b2e5c40ac3c8d
49b202d9ba0ace3daca9c43bcf8d2ac2
  $fShowNumber :: GHC.Show.Show Calculate.Number
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Calculate.Number
                  Calculate.$fShowNumber_$cshowsPrec
                  Calculate.$fShowNumber_$cshow
                  Calculate.$fShowNumber_$cshowList -}
49b202d9ba0ace3daca9c43bcf8d2ac2
  $fShowNumber1 :: Calculate.Number -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Calculate.Number) (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Calculate.Integer
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Calculate.$fShowNumber3)
                        eta
                   Calculate.Double
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Calculate.$fShowNumber2)
                        eta }) -}
7134e4cc209dd24090d520e3e006f513
  $fShowNumber2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Double"#) -}
81545513c9282fa183cd6db4fd1dc029
  $fShowNumber3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Integer"#) -}
49b202d9ba0ace3daca9c43bcf8d2ac2
  $fShowNumber_$cshow :: Calculate.Number -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Calculate.Number) ->
                 case x of wild {
                   Calculate.Integer -> Calculate.$fShowNumber3
                   Calculate.Double -> Calculate.$fShowNumber2 }) -}
49b202d9ba0ace3daca9c43bcf8d2ac2
  $fShowNumber_$cshowList :: [Calculate.Number] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Calculate.Number
                   Calculate.$fShowNumber1) -}
49b202d9ba0ace3daca9c43bcf8d2ac2
  $fShowNumber_$cshowsPrec ::
    GHC.Types.Int -> Calculate.Number -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Calculate.Number)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Calculate.Integer
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Calculate.$fShowNumber3)
                        eta
                   Calculate.Double
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Calculate.$fShowNumber2)
                        eta }) -}
c80dd7ea0b0de639c24f7763f8e1b917
  $tc'Double :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8093323366734478513##
                   14546125951159379890##
                   Calculate.$trModule
                   Calculate.$tc'Double1) -}
15a549e57ebe6c833a8ca11e92dfd366
  $tc'Double1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Double"#) -}
8cee114ef8d99bd2a9a8295bcd14b955
  $tc'Integer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14905724718074806434##
                   7609485080212608942##
                   Calculate.$trModule
                   Calculate.$tc'Integer1) -}
dc45a05ee71a269c11f51a656c85d6ff
  $tc'Integer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Integer"#) -}
c498062d7fbabe3673c6650c57a38777
  $tcNumber :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16524699177446516755##
                   3018717419864560536##
                   Calculate.$trModule
                   Calculate.$tcNumber1) -}
6ffe3c05982a6689683160f4068ad285
  $tcNumber1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Number"#) -}
30718d74da1d1a569220531c3deef558
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Calculate.$trModule2
                   Calculate.$trModule1) -}
4e2717475a8190e4d7c3eafc12b5b5e3
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Calculate"#) -}
6e2286cb24c111c5dd20cb016b154604
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "compiler-0.1.0.0-I0pxvr0RakAFj74FxK0lcc"#) -}
49b202d9ba0ace3daca9c43bcf8d2ac2
  data Number = Integer | Double
instance [safe] GHC.Show.Show [Calculate.Number]
  = Calculate.$fShowNumber
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

