
==================== FINAL INTERFACE ====================
2017-01-13 06:13:10.0737348 UTC

interface compiler-0.1.0.0-I0pxvr0RakAFj74FxK0lcc:Lib 8001
  interface hash: 829deda3344b342240f8c0b489655dae
  ABI hash: acfad6b0b62bf41571bfdd29182d012f
  export-list hash: e1e21495fa512f42ca40af701d4d46b2
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 365edb496d38399416a64131c77130e2
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.defMain
  Lib.parseField
  Lib.parseFlag
  Lib.parseInPath
  Lib.parseOption
  Lib.parseOutPath
  Lib.Option{Lib.Option inPath outPath}
  Lib.Parser
module dependencies: BoolExpr Parser PrettyTP REPL
package dependencies: GenericPretty-1.2.1@GenericPretty-1.2.1-FqlYg3LhEVa3kMV6nPdaDK
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-4RIYnAHyOmg6Dh17ENWi43
                      base-4.9.0.0* binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-Ctl752zbguF6QanxurLOm2
                      integer-gmp-1.0.0.1
                      integer-logarithms-1@integer-logarithms-1-E6LvTbkhTkGIa6wPB3rtJw
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      scientific-0.3.4.10@scientific-0.3.4.10-2Y658Wts4fDGgAkWhKOJwC
                      text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs
                      transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-4RIYnAHyOmg6Dh17ENWi43:Data.Attoparsec.Text.Internal
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-Ctl752zbguF6QanxurLOm2:Data.Hashable.Generic
         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text
         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Fusion.Bundle
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-4RIYnAHyOmg6Dh17ENWi43:Data.Attoparsec.Internal.Types
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Functor.Identity base-4.9.0.0:Data.List.NonEmpty
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Semigroup
                         base-4.9.0.0:Data.Type.Equality base-4.9.0.0:Data.Version
                         base-4.9.0.0:Data.Void base-4.9.0.0:GHC.Exts
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
                         compiler-0.1.0.0-I0pxvr0RakAFj74FxK0lcc:PrettyTP
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text
                         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text.Lazy
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector
import  -/  base-4.9.0.0:Control.Applicative fdcece230f8af145aec7b432bfe73083
import  -/  base-4.9.0.0:GHC.Base dd8044a8d640eee51828c17c476a6ba7
import  -/  base-4.9.0.0:GHC.Show 0b5845243cb2ec62b57dd6963d276ec6
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  base-4.9.0.0:System.Environment b460b4a8ded59bf876fca87a5a3550f2
import  -/  base-4.9.0.0:System.IO c1068c4f4231e3198e330f99a58145b0
import  -/  BoolExpr 6bc360c4345c527827b71d453af02c24
  exports: 938e5a98769e0827b558347c7828b464
import  -/  PrettyTP f419d0c6cd94b6f720df55faa30c7347
  exports: 9e5e881bde8cb91b1ee8e5c7fb9f755f
import  -/  REPL 181a831de1a990308493c597623ce367
  exports: 88a0ccbda236ad7361f44f2b4dacde8f
  mainLoop aa1d44a35365b87545070e96f1171c19
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 59ba4f128d7d19046010538c416f3875
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d6db6ac95571c976686f97c64548b060
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.State d851912d62cbc95e043a9cc13c3581de
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.State.Class 6b9267d06a66633777f53733046c8d46
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.State.Lazy fd06dab0d634fc591e8c33380a9811a8
24b7bdb61dadf4f9559461a8b53e453a
  $fShowOption :: GHC.Show.Show Lib.Option
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Option
                  Lib.$fShowOption_$cshowsPrec
                  Lib.$fShowOption_$cshow
                  Lib.$fShowOption_$cshowList -}
24b7bdb61dadf4f9559461a8b53e453a
  $fShowOption1 :: Lib.Option -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Lib.Option) (w1 :: GHC.Base.String) ->
                 case w of ww { Lib.Option ww1 ww2 ->
                 Lib.$w$cshowsPrec 0# ww1 ww2 w1 }) -}
cb18f0fbc250161607ba9bc97d07aaca
  $fShowOption2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
aeebaae48010bcdb6d2e0d6e0f625a13
  $fShowOption3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "outPath = "#) -}
9342e7e7a090d3db02eb39367d1ffa98
  $fShowOption4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
3d795cb0a91296896e0a0e8c0102cc62
  $fShowOption5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "inPath = "#) -}
a67ba8beb49f756c810322bafd9ea1ad
  $fShowOption6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Option {"#) -}
24b7bdb61dadf4f9559461a8b53e453a
  $fShowOption_$cshow :: Lib.Option -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Lib.Option) ->
                 Lib.$fShowOption_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
24b7bdb61dadf4f9559461a8b53e453a
  $fShowOption_$cshowList :: [Lib.Option] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Lib.Option Lib.$fShowOption1) -}
24b7bdb61dadf4f9559461a8b53e453a
  $fShowOption_$cshowsPrec ::
    GHC.Types.Int -> Lib.Option -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Lib.Option)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Lib.Option ww3 ww4 ->
                 Lib.$w$cshowsPrec ww1 ww3 ww4 w2 } }) -}
d7687cee00292df1f93b6f51238704d6
  $tc'Option :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13345298318255318737##
                   6724234792064155282##
                   Lib.$trModule
                   Lib.$tc'Option1) -}
e58d90f60c78ff0c2ae20f45e8d3eb33
  $tc'Option1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Option"#) -}
edcc12ae76892adcb6dc82ba142aca92
  $tcOption :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18435099127586936365##
                   7440773439965838221##
                   Lib.$trModule
                   Lib.$tcOption1) -}
1a56cfc55a4008adcca52ab199cc53e2
  $tcOption1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Option"#) -}
f7be60f3719c434527f41e67f2660f58
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
66a0b1502a90c8ce5fa91d02c4f2846a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
023d8f9483849b6e7b40b42c9dd0d2ee
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "compiler-0.1.0.0-I0pxvr0RakAFj74FxK0lcc"#) -}
55a1b41426bb958ea10f2536ad616c50
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Lib.$fShowOption6
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Lib.$fShowOption5
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows8
                             (GHC.Show.showLitString
                                ww1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows8
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      Lib.$fShowOption4
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Lib.$fShowOption3
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows8
                                            (GHC.Show.showLitString
                                               ww2
                                               (GHC.Types.:
                                                  @ GHC.Types.Char
                                                  GHC.Show.shows8
                                                  (GHC.Base.++
                                                     @ GHC.Types.Char
                                                     Lib.$fShowOption2
                                                     x))))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)) }) -}
24b7bdb61dadf4f9559461a8b53e453a
  data Option
    = Option {inPath :: GHC.Base.String, outPath :: GHC.Base.String}
88cee4bc69ceb3831308e300994020f5
  type Parser a =
    Control.Monad.Trans.State.Lazy.StateT
      [GHC.Base.String] GHC.Base.Maybe a
00f846abaf4197cd8bb494709b433f3d
  defMain :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.defMain1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
809bb0575889eee406c1f23045774efa
  defMain1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Environment.getArgs2 s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Base.Nothing
                   -> case GHC.Environment.getFullArgs1
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      Lib.defMain2
                        (case System.Environment.dropRTSArgs ipv3 of wild1 {
                           [] -> GHC.List.scanl2 @ GHC.Base.String : ds3 xs -> xs })
                        ipv2 }
                   GHC.Base.Just argv
                   -> Lib.defMain2 (GHC.List.tail @ GHC.Base.String argv) ipv } }) -}
faa2ca25ef4ff384935c05aaa486d60d
  defMain2 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (args :: [GHC.Base.String])
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (case Lib.defMain9 args of wild {
                           GHC.Base.Nothing
                           -> case Lib.defMain6 args of wild1 {
                                GHC.Base.Nothing -> GHC.Show.$fShowMaybe3
                                GHC.Base.Just b1 -> Lib.defMain4 b1 }
                           GHC.Base.Just ipv -> Lib.defMain4 ipv })
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Lib.defMain3
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 REPL.defMain2
                   (Data.Map.Base.Tip @ GHC.Base.String @ GHC.Base.String)
                   ipv2 } }) -}
dc8fb75bb11817439b52cfed16ceae13
  defMain3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "This is a simple REPL"#) -}
a7b30c2d924894d7cf0917e344680167
  defMain4 :: (Lib.Option, [GHC.Base.String]) -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,1*U(1*U(1*U,1*U),U)>,
     Unfolding: (\ (b1 :: (Lib.Option, [GHC.Base.String]))[OneShot] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   GHC.Show.$fShowMaybe1
                   (case b1 of ww { (,) ww1 ww2 ->
                    GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows9
                      (case ww1 of ww4 { Lib.Option ww5 ww6 ->
                       Lib.$w$cshowsPrec
                         0#
                         ww5
                         ww6
                         (GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.shows7
                            (GHC.Show.$fShow(,)_$sgo
                               Lib.defMain5
                               (\ (eta1 :: GHC.Base.String) ->
                                GHC.Show.shows_$s$cshowList ww2 eta1)
                               (GHC.Types.[] @ GHC.Show.ShowS))) }) })) -}
50706b78ab3b6ebdc226324b5589ff13
  defMain5 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows6
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6877ed15d2be850da9494825b0c1af0e
  defMain6 ::
    [GHC.Base.String] -> GHC.Base.Maybe (Lib.Option, [GHC.Base.String])
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (s1 :: [GHC.Base.String]) ->
                 case s1 of wild {
                   [] -> GHC.Base.Nothing @ (Lib.Option, [GHC.Base.String])
                   : arg args'
                   -> case GHC.Base.eqString arg Lib.defMain8 of wild1 {
                        GHC.Types.False
                        -> GHC.Base.Nothing @ (Lib.Option, [GHC.Base.String])
                        GHC.Types.True
                        -> case args' of wild2 {
                             [] -> GHC.Base.Nothing @ (Lib.Option, [GHC.Base.String])
                             : arg1 args'1
                             -> case args'1 of wild3 {
                                  [] -> GHC.Base.Nothing @ (Lib.Option, [GHC.Base.String])
                                  : arg2 args'2
                                  -> case GHC.Base.eqString arg2 Lib.defMain7 of wild4 {
                                       GHC.Types.False
                                       -> GHC.Base.Nothing @ (Lib.Option, [GHC.Base.String])
                                       GHC.Types.True
                                       -> case args'2 of wild5 {
                                            [] -> GHC.Base.Nothing @ (Lib.Option, [GHC.Base.String])
                                            : arg3 args'3
                                            -> GHC.Base.Just
                                                 @ (Lib.Option, [GHC.Base.String])
                                                 (Lib.Option arg3 arg1, args'3) } } } } } }) -}
c18bf82c2cfa9f18e9f6b89531b59e16
  defMain7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "--"#
                   Lib.defMain_f) -}
92c1066873a0cfb620e7c6cff93dccea
  defMain8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "--"#
                   Lib.defMain_f1) -}
643909c979e0f03b794ddcc3002a9ecd
  defMain9 ::
    [GHC.Base.String] -> GHC.Base.Maybe (Lib.Option, [GHC.Base.String])
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (s1 :: [GHC.Base.String]) ->
                 case s1 of wild {
                   [] -> GHC.Base.Nothing @ (Lib.Option, [GHC.Base.String])
                   : arg args'
                   -> case GHC.Base.eqString arg Lib.defMain7 of wild1 {
                        GHC.Types.False
                        -> GHC.Base.Nothing @ (Lib.Option, [GHC.Base.String])
                        GHC.Types.True
                        -> case args' of wild2 {
                             [] -> GHC.Base.Nothing @ (Lib.Option, [GHC.Base.String])
                             : arg1 args'1
                             -> case args'1 of wild3 {
                                  [] -> GHC.Base.Nothing @ (Lib.Option, [GHC.Base.String])
                                  : arg2 args'2
                                  -> case GHC.Base.eqString arg2 Lib.defMain8 of wild4 {
                                       GHC.Types.False
                                       -> GHC.Base.Nothing @ (Lib.Option, [GHC.Base.String])
                                       GHC.Types.True
                                       -> case args'2 of wild5 {
                                            [] -> GHC.Base.Nothing @ (Lib.Option, [GHC.Base.String])
                                            : arg3 args'3
                                            -> GHC.Base.Just
                                                 @ (Lib.Option, [GHC.Base.String])
                                                 (Lib.Option arg1 arg3, args'3) } } } } } }) -}
e05980fff6fe90ff4bebe558fc9e92fd
  defMain_f :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "in"#) -}
b95ac1c0011c826582c2ed0ba9570aa5
  defMain_f1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "out"#) -}
60a25fc248901beeba90fb5ea8c54102
  inPath :: Lib.Option -> GHC.Base.String
  RecSel Left Lib.Option
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Option) ->
                 case ds of wild { Lib.Option ds1 ds2 -> ds1 }) -}
63569f01a3d70f4dda55d0c11faeecd0
  outPath :: Lib.Option -> GHC.Base.String
  RecSel Left Lib.Option
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Option) ->
                 case ds of wild { Lib.Option ds1 ds2 -> ds2 }) -}
83ee9ce366f60be6f913ca5e861cc77a
  parseField :: GHC.Base.String -> Lib.Parser GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Lib.parseField1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <[GHC.Base.String]>_N <GHC.Base.Maybe>_R <GHC.Base.String>_N)) -}
5bf2a6027eecf3d7c8c40b37e1c78da2
  parseField1 ::
    GHC.Base.String
    -> [GHC.Base.String]
    -> GHC.Base.Maybe (GHC.Base.String, [GHC.Base.String])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (f :: GHC.Base.String) (eta :: [GHC.Base.String]) ->
                 case eta of wild {
                   [] -> GHC.Base.Nothing @ (GHC.Base.String, [GHC.Base.String])
                   : arg args'
                   -> case GHC.Base.eqString
                             arg
                             (GHC.CString.unpackAppendCString# "--"# f) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.Nothing @ (GHC.Base.String, [GHC.Base.String])
                        GHC.Types.True
                        -> case args' of wild2 {
                             [] -> GHC.Base.Nothing @ (GHC.Base.String, [GHC.Base.String])
                             : arg1 args'1
                             -> GHC.Base.Just
                                  @ (GHC.Base.String, [GHC.Base.String])
                                  (arg1, args'1) } } }) -}
68588d1c2c600d9e943ab6e3df4108bf
  parseFlag :: GHC.Base.String -> Lib.Parser GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Lib.parseFlag1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <[GHC.Base.String]>_N <GHC.Base.Maybe>_R <GHC.Base.String>_N)) -}
41fe9c006ccf7752295c0b9ecee8059c
  parseFlag1 ::
    GHC.Base.String
    -> [GHC.Base.String]
    -> GHC.Base.Maybe (GHC.Base.String, [GHC.Base.String])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (f :: GHC.Base.String) (eta :: [GHC.Base.String]) ->
                 case eta of wild {
                   [] -> GHC.Base.Nothing @ (GHC.Base.String, [GHC.Base.String])
                   : arg args'
                   -> case GHC.Base.eqString
                             arg
                             (GHC.CString.unpackAppendCString# "--"# f) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.Nothing @ (GHC.Base.String, [GHC.Base.String])
                        GHC.Types.True
                        -> GHC.Base.Just
                             @ (GHC.Base.String, [GHC.Base.String])
                             (f, args') } }) -}
8aefa688fb748bae294364292a0611f1
  parseInPath :: Lib.Parser GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Lib.parseInPath1
                  `cast`
                (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <[GHC.Base.String]>_N <GHC.Base.Maybe>_R <GHC.Base.String>_N)) -}
359d2234d8e6e19b5c1fcf81983b442c
  parseInPath1 ::
    [GHC.Base.String]
    -> GHC.Base.Maybe (GHC.Base.String, [GHC.Base.String])
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (eta :: [GHC.Base.String]) ->
                 case eta of wild {
                   [] -> GHC.Base.Nothing @ (GHC.Base.String, [GHC.Base.String])
                   : arg args'
                   -> case GHC.Base.eqString arg Lib.defMain7 of wild1 {
                        GHC.Types.False
                        -> GHC.Base.Nothing @ (GHC.Base.String, [GHC.Base.String])
                        GHC.Types.True
                        -> case args' of wild2 {
                             [] -> GHC.Base.Nothing @ (GHC.Base.String, [GHC.Base.String])
                             : arg1 args'1
                             -> GHC.Base.Just
                                  @ (GHC.Base.String, [GHC.Base.String])
                                  (arg1, args'1) } } }) -}
971635f6857886385bf974055dd6a740
  parseOption :: Lib.Parser Lib.Option
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.parseOption1
                  `cast`
                (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <[GHC.Base.String]>_N <GHC.Base.Maybe>_R <Lib.Option>_N)) -}
c658d9eb3ebc0d7be69a39a9f8a3c449
  parseOption1 ::
    [GHC.Base.String] -> GHC.Base.Maybe (Lib.Option, [GHC.Base.String])
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s1 :: [GHC.Base.String]) ->
                 case Lib.defMain9 s1 of wild {
                   GHC.Base.Nothing -> Lib.defMain6 s1 GHC.Base.Just ipv -> wild }) -}
a12dfb325a13057087739d476846fcc8
  parseOutPath :: Lib.Parser GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Lib.parseOutPath1
                  `cast`
                (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <[GHC.Base.String]>_N <GHC.Base.Maybe>_R <GHC.Base.String>_N)) -}
cdeb9bc0f1ef6804465bd464e7346b7c
  parseOutPath1 ::
    [GHC.Base.String]
    -> GHC.Base.Maybe (GHC.Base.String, [GHC.Base.String])
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (eta :: [GHC.Base.String]) ->
                 case eta of wild {
                   [] -> GHC.Base.Nothing @ (GHC.Base.String, [GHC.Base.String])
                   : arg args'
                   -> case GHC.Base.eqString arg Lib.defMain8 of wild1 {
                        GHC.Types.False
                        -> GHC.Base.Nothing @ (GHC.Base.String, [GHC.Base.String])
                        GHC.Types.True
                        -> case args' of wild2 {
                             [] -> GHC.Base.Nothing @ (GHC.Base.String, [GHC.Base.String])
                             : arg1 args'1
                             -> GHC.Base.Just
                                  @ (GHC.Base.String, [GHC.Base.String])
                                  (arg1, args'1) } } }) -}
instance [safe] GHC.Show.Show [Lib.Option] = Lib.$fShowOption
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

